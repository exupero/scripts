#!/usr/bin/env bb

(ns scittle
  (:require [clojure.java.io :as io]
            [clojure.tools.cli :as cli]
            [hiccup2.core :as hiccup]
            [org.httpkit.server :as server]
            serve
            watcher))

(defn index [script-path _ {:keys [replicant]}]
  {:status 200
   :body (str
           (hiccup/html
             [:html
              [:head
               [:meta {:charset "UTF-8"}]
               [:meta {:name "viewport" :content "width=device-width, initial-scale=1"}]
               [:title "Scittle"]
               [:link {:rel "icon" :href "data:,"}]
               [:link {:rel "apple-touch-icon" :href "data:,"}]
               [:script {:src "https://cdn.jsdelivr.net/npm/scittle@0.7.23/dist/scittle.js" :type "application/javascript"}]
               (when replicant
                 [:script {:src "https://cdn.jsdelivr.net/npm/scittle@0.7.23/dist/scittle.replicant.js" :type "application/javascript"}])]
              [:body
               [:div {:id "app"}]
               [:script {:type "application/javascript"}
                (hiccup/raw (serve/listen-and "console.log('Evaling'); scittle.core.eval_string(event.data)"))]
               [:script {:type "application/x-scittle"}
                (hiccup/raw (slurp script-path))]]]))})

(def cli-opts
  [["-p" "--port PORT" "port to serve on"
    :default 8888
    :parse-fn #(Integer/parseInt %)]
   ["-r" "--replicant" "Include Replicant"]])

(let [{{:keys [port] :as opts} :options [path] :arguments} (cli/parse-opts *command-line-args* cli-opts)
      url (str "http://localhost:" port "/")
      channels (atom #{})
      watch (watcher/file)]
  (serve/serve-channels #(index path % opts) port channels)
  (println "Serving at" url)
  (watch (.getAbsolutePath (io/file path))
         (fn []
           (println "Changes detected")
           (let [data (slurp path)]
             (doseq [ch @channels]
               (server/send! ch data))))))
