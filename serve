#!/usr/bin/env bb

(ns server
  (:require clojure.java.browse
            [clojure.string :as str]
            [babashka.cli :as cli]
            [babashka.fs :as fs]
            [babashka.pods :as pods]
            [org.httpkit.server :as server])
  (:import [java.net URLDecoder]))
(pods/load-pod 'org.babashka/fswatcher "0.0.5")
(require '[pod.babashka.fswatcher :as fw])

;; A simple mime type utility from https://github.com/ring-clojure/ring/blob/master/ring-core/src/ring/util/mime_type.clj
(def ^{:doc "A map of file extensions to mime-types."}
  default-mime-types
  {"7z"       "application/x-7z-compressed"
   "aac"      "audio/aac"
   "ai"       "application/postscript"
   "appcache" "text/cache-manifest"
   "asc"      "text/plain"
   "atom"     "application/atom+xml"
   "avi"      "video/x-msvideo"
   "bin"      "application/octet-stream"
   "bmp"      "image/bmp"
   "bz2"      "application/x-bzip"
   "class"    "application/octet-stream"
   "cer"      "application/pkix-cert"
   "crl"      "application/pkix-crl"
   "crt"      "application/x-x509-ca-cert"
   "css"      "text/css"
   "csv"      "text/csv"
   "deb"      "application/x-deb"
   "dart"     "application/dart"
   "dll"      "application/octet-stream"
   "dmg"      "application/octet-stream"
   "dms"      "application/octet-stream"
   "doc"      "application/msword"
   "dvi"      "application/x-dvi"
   "edn"      "application/edn"
   "eot"      "application/vnd.ms-fontobject"
   "eps"      "application/postscript"
   "etx"      "text/x-setext"
   "exe"      "application/octet-stream"
   "flv"      "video/x-flv"
   "flac"     "audio/flac"
   "gif"      "image/gif"
   "gz"       "application/gzip"
   "htm"      "text/html"
   "html"     "text/html"
   "ico"      "image/x-icon"
   "iso"      "application/x-iso9660-image"
   "jar"      "application/java-archive"
   "jpe"      "image/jpeg"
   "jpeg"     "image/jpeg"
   "jpg"      "image/jpeg"
   "js"       "text/javascript"
   "json"     "application/json"
   "lha"      "application/octet-stream"
   "lzh"      "application/octet-stream"
   "mov"      "video/quicktime"
   "m3u8"     "application/x-mpegurl"
   "m4v"      "video/mp4"
   "manifesto" "text/cache-manifest"
   "mjs"      "text/javascript"
   "mp3"      "audio/mpeg"
   "mp4"      "video/mp4"
   "mpd"      "application/dash+xml"
   "mpe"      "video/mpeg"
   "mpeg"     "video/mpeg"
   "mpg"      "video/mpeg"
   "oga"      "audio/ogg"
   "ogg"      "audio/ogg"
   "ogv"      "video/ogg"
   "pbm"      "image/x-portable-bitmap"
   "pdf"      "application/pdf"
   "pgm"      "image/x-portable-graymap"
   "png"      "image/png"
   "pnm"      "image/x-portable-anymap"
   "ppm"      "image/x-portable-pixmap"
   "ppt"      "application/vnd.ms-powerpoint"
   "ps"       "application/postscript"
   "qt"       "video/quicktime"
   "rar"      "application/x-rar-compressed"
   "ras"      "image/x-cmu-raster"
   "rb"       "text/plain"
   "rd"       "text/plain"
   "rss"      "application/rss+xml"
   "rtf"      "application/rtf"
   "sgm"      "text/sgml"
   "sgml"     "text/sgml"
   "svg"      "image/svg+xml"
   "swf"      "application/x-shockwave-flash"
   "tar"      "application/x-tar"
   "tif"      "image/tiff"
   "tiff"     "image/tiff"
   "ts"       "video/mp2t"
   "ttf"      "font/ttf"
   "txt"      "text/plain"
   "webm"     "video/webm"
   "wmv"      "video/x-ms-wmv"
   "woff"     "font/woff"
   "woff2"    "font/woff2"
   "xbm"      "image/x-xbitmap"
   "xls"      "application/vnd.ms-excel"
   "xml"      "text/xml"
   "xpm"      "image/x-xpixmap"
   "xwd"      "image/x-xwindowdump"
   "zip"      "application/zip"})

;; https://github.com/ring-clojure/ring/blob/master/ring-core/src/ring/util/mime_type.clj
(defn- filename-ext
  "Returns the file extension of a filename or filepath."
  [filename]
  (when-let [ext (second (re-find #"\.([^./\\]+)$" filename))]
    (str/lower-case ext)))

;; https://github.com/ring-clojure/ring/blob/master/ring-core/src/ring/util/mime_type.clj
(defn ext-mime-type
  "Get the mimetype from the filename extension. Takes an optional map of
  extensions to mimetypes that overrides values in the default-mime-types map."
  ([filename]
   (ext-mime-type filename {}))
  ([filename mime-types]
   (let [mime-types (merge default-mime-types mime-types)]
     (mime-types (filename-ext filename)))))

(defn not-found [f dir]
  {:status 404 :body (str "Not found `" f "` in " dir)})

(defn body
  ([path] (body path identity))
  ([path body-handler]
   (let [mime-type (ext-mime-type (fs/file-name path))]
     {:headers {"Content-Type" mime-type
                "Access-Control-Allow-Origin" "*"}
      :body (body-handler (fs/file path))})))

(defn find-file [f]
  (let [index-file (fs/path f "index.html")]
    (cond
      (and (fs/directory? f) (fs/readable? index-file))
      , index-file
      (fs/readable? f)
      , f
      :else
      , nil)))

(defn inject-live-reload-js [f]
  (str/replace (slurp f) #"</head>" "<script>
function resetHtml(content) {
  const html = document.createElement('html');
  html.innerHTML = content;
  document.body.innerHTML = html.querySelector('body').innerHTML;
  Array.from(document.body.querySelectorAll('script')).forEach(oldScript => {
    const newScript = document.createElement('script');
    Array.from(oldScript.attributes)
      .forEach(attr => newScript.setAttribute(attr.name, attr.value));
    newScript.appendChild(document.createTextNode(oldScript.innerHTML));
    oldScript.parentNode.replaceChild(newScript, oldScript);
  });
  Array.from(document.body.querySelectorAll('img')).forEach(img => {
    const t = new Date().getTime();
    const i = img.src.indexOf('?');
    img.src = img.src.substring(0, i > -1 ? i : img.src.length) + '?t=' + t;
  });
}
function listenOnWebsocket() {
  const listen = () => {
    const conn = new WebSocket(`ws://\\${window.location.host}\\${window.location.pathname}`);
    conn.onopen = () => console.log(`Socket connected to server`);
    conn.onclose = () => {
      console.warn(`Socket to server closed; retrying...`);
      setTimeout(listen, 3000);
    };
    conn.onmessage = (e) => {
      console.log('Reloading');
      resetHtml(e.data);
    }
  }
  listen();
}
listenOnWebsocket();
</script></head>"))

(def path->channels (atom {}))

(defn on-open [ch path]
  (swap! path->channels update path (fnil conj #{}) ch))

(defn on-receive [ch msg]
  (println "Received data on" ch ":" (pr-str msg)))

(defn on-close [ch _]
  (swap! path->channels update-vals #(disj % ch)))

(defn watch [dir]
  (fw/watch dir
    (fn [{:keys [path]}]
      (when-not (str/ends-with? path "~")
        (println "Changes to" (str path))
        (let [k (-> path
                    (str/replace (re-pattern (str "^" dir)) "")
                    (str/replace #"/?(index\.html)?$" ""))
              content (try
                        (slurp path)
                        (catch Exception e
                          (println (str "Error reading file " path ": " (.getMessage e)))
                          nil))]
          (when content
            (doseq [ch (@path->channels k)]
              (server/send! ch content))))))
    {:recursive true}))

(defn serve [{:keys [port dir open live-reload]}]
  (assert (fs/directory? dir) (str "The given path `" dir "` is not a directory."))
  (let [watcher (watch dir)]
    (server/run-server
     (fn [{:keys [uri websocket?] :as req}]
       (if websocket?
         (let [path (str/replace uri #"/(index\.html)?$" "")]
           (server/as-channel req {:on-open #(on-open % path)
                                   :on-receive on-receive
                                   :on-close on-close}))
         (let [f (find-file
                   (fs/path dir (str/replace-first (URLDecoder/decode uri) #"^/" "")))]
           (cond
             (nil? f)
             , (not-found f dir)
             (-> f fs/file-name ext-mime-type (= "text/html"))
             , (if live-reload
                 (body f inject-live-reload-js)
                 (body f))
             :else
             , (body f)))))
     {:port port})
    (println "Starting HTTP server at" port "for" (str dir))
    (when open
      (clojure.java.browse/browse-url (format "http://localhost:%s/" port)))
    (try
      @(promise)
      (finally
        (fw/unwatch watcher)))))

(def cli-opts
  {:spec {:dir {:desc "directory to serve"
                :alias :d
                :coerce :string
                :default "."}
          :ip {:desc "IP address to serve on"
               :alias :i
               :coerce :string
               :default "127.0.0.1"}
          :live-reload {:desc "whether to live reload HTML"
                        :alias :l
                        :coerce :boolean
                        :default false}
          :open {:desc "path to open a browser to"
                 :alias :o
                 :coerce :string}
          :port {:desc "port to serve on"
                 :alias :p
                 :coerce :long}
          :interval {:desc "seconds between file checks"
                     :alias :t
                     :coerce :long
                     :default 1}}})

(when (= *file* (System/getProperty "babashka.file"))
  (let [options (cli/parse-opts *command-line-args* cli-opts)]
    (serve options)))
