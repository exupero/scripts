#!/usr/bin/env bb

(ns vega
  (:require [clojure.java.io :as io]
            [clojure.tools.cli :as cli]
            [babashka.pods :as pods]
            [cheshire.core :as json]
            [hiccup2.core :as hiccup]
            [org.httpkit.server :as server]))
(pods/load-pod 'org.babashka/fswatcher "0.0.7")
(require '[pod.babashka.fswatcher :as fw])

(defonce channels (atom #{}))
(defonce watcher (atom nil))

(defn watch [edn-path]
  (when-let [w @watcher]
    (fw/unwatch w))
  (reset! watcher
          ; Doesn't seem to work to watch one file, only gets one rename event
          ; then never sees further events
          (fw/watch (.getParent (io/file edn-path))
                    (fn [{:keys [path]}]
                      (when (= path edn-path)
                        (println "Changes detected")
                        (let [data (-> path slurp read-string (json/generate-string {:pretty true}))]
                          (doseq [ch @channels]
                            (server/send! ch data)))))
                    {:delay-ms 500})))

(defn on-open [ch]
  (swap! channels conj ch))

(defn on-receive [ch msg]
  (println "Received data on" ch ":" (pr-str msg)))

(defn on-close [ch _]
  (swap! channels disj ch))

(defn serve [handler port]
  (server/run-server
    (fn [{:keys [websocket?] :as req}]
      (if websocket?
        (server/as-channel req {:on-open on-open
                                :on-receive on-receive
                                :on-close on-close})
        (handler req)))
    {:port port}))

(defn static-js [filename]
  {:status 200
   :headers {"Content-Type" "application/javascript"}
   :body (slurp (io/file (.getParent (io/file *file*)) "static" filename))})

(def listen-and-render "
function listenOnWebsocket() {
  const listen = () => {
    const conn = new WebSocket(`ws://${window.location.host}${window.location.pathname}`);
    conn.onopen = () => console.log(`Socket connected to server`);
    conn.onclose = () => {
      console.warn(`Socket to server closed; retrying...`);
      setTimeout(listen, 3000);
    };
    conn.onmessage = (e) => {
      console.log('Evaling');
      vegaEmbed('#viz', JSON.parse(e.data))
    }
  }
  listen();
}
listenOnWebsocket();
")

(defn index [path {:keys [uri]} _]
  (condp = uri
    "/static/vega.js" (static-js "vega.js")
    "/static/vega-lite.js" (static-js "vega-lite.js")
    "/static/vega-embed.js" (static-js "vega-embed.js")
    "/" (let [json (json/generate-string (read-string (slurp path)) {:pretty true})]
          {:status 200
           :body (str
                   (hiccup/html
                     [:html
                      [:head
                       [:meta {:charset "UTF-8"}]
                       [:meta {:name "viewport" :content "width=device-width, initial-scale=1"}]
                       [:title "Vega"]
                       [:link {:rel "icon" :href "data:,"}]
                       [:link {:rel "apple-touch-icon" :href "data:,"}]
                       [:script {:src "/static/vega.js"}]
                       [:script {:src "/static/vega-lite.js"}]
                       [:script {:src "/static/vega-embed.js"}]]
                      [:body
                       [:div#viz]
                       [:script {:type "application/javascript"}
                        (hiccup/raw listen-and-render)]
                       [:script {:type "application/javascript"}
                        (hiccup/raw (format "vegaEmbed('#viz', %s);" json))]]]))})
    {:status 404}))

(def cli-opts
  [["-p" "--port PORT" "port to serve on"
    :default 8888
    :parse-fn #(Integer/parseInt %)]])

(let [{{:keys [port] :as opts} :options [path] :arguments} (cli/parse-opts *command-line-args* cli-opts)
      url (str "http://localhost:" port "/")]
  (watch (.getAbsolutePath (io/file path)))
  (serve #(index path % opts) port)
  (println "Serving at" url)
  (try
    @(promise)
    (catch Exception e
      (prn e)
      (fw/unwatch @watcher))))
